#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$"heart failure"),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,"heart failure"], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$"heart failure"),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
dframe.3 <- dframe.2[!is.na(dframe.2$outcome),]
dframe.3 <- dframe.2[!is.na(dframe.2$"heart failure"),]
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$"outcome"),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$"outcome"),]
return dframe.3
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$outcome),]
return dframe.3
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2$outcome),]
print(dframe.3)
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
dframe.3 <- dframe.2[!is.na(dframe.2[, outcome])]
View(dframe.2)
dframe.2["heart failure"]
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
dframe.3 <- dframe.2[!is.na(as.list(dframe.2[outcome])),]
dframe.2[!is.na(dframe.2[outcome]),]
dframe.3 <- dframe.2[!is.na(dframe.2[[outcome]]),]
dframe.2[["heart failure"]]
!is.na(dframe.2[["heart failure"]])
na.omit(dframe.2[["heart failure"]])
dframe.3 <- dframe.2[na.omit(dframe.2[[outcome]]),]
dframe.3 <- dframe.2[na.omit(dframe.2[outcome]),]
dframe.3 <- dframe.2[na.omit(dframe.2[outcome]),]
!is.na(dframe.2$outcome)
!is.na(dframe.2$outcome)
!is.na(dframe.2$"heart failure")
dframe.2[!is.na(dframe.2$outcome),]
dframe.3 <- dframe.2[!is.na(dframe.2$outcome),]
dframe.2[!is.na(dframe.2$"heart failure"),]
!is.na(dframe.2$"heart failure")
outcome <- "heart failure"
dframe.2[!is.na(dframe.2$outcome),]
dframe.2[!is.na(dframe.2[outcome],]
dframe.2[!is.na(dframe.2[outcome]),]
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
head(dframe.4, 1)[[1]]
} else if (num == "worst"){
tail(dframe.4, 1)[[1]]
} else {
dframe.4[num,"name"]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
return head(dframe.4, 1)[[1]]
} else if (num == "worst"){
return tail(dframe.4, 1)[[1]]
} else {
return dframe.4[num,"name"]
}
}
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
return(head(dframe.4, 1)[[1]])
} else if (num == "worst"){
return(tail(dframe.4, 1)[[1]])
} else {
return(dframe.4[num,"name"])
}
}
rankhospital("TX", "heart failure", 4)
best <- function(state, outcome) {
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
return head(dframe.4[[1]])
}
best <- function(state, outcome) {
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
return(head(dframe.4[[1]]))
}
best("TX", "heart failure")
best <- function(state, outcome) {
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
return(head(dframe.4, 1)[[1]]))
}
best <- function(state, outcome) {
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
return(head(dframe.4, 1)[[1]])
}
best("TX", "heart failure")
best("TX", "heart attack")
best("MD", "heart attack")
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Extracts hospital name and outcome measures only
dframe.2 <- dframe.1[, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2["heart failure"]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
View(dframe.4)
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Extracts hospital name and outcome measures only
dframe.2 <- dframe.1[, c(2, 7, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(3,4,5)] <- sapply(dframe.2[,c(3,4,5)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2["heart failure"]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
View(dframe.4)
View(dframe.4)
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#Extracts hospital name and outcome measures only
dframe.2 <- dframe.1[, c(2, 7, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(3,4,5)] <- sapply(dframe.2[,c(3,4,5)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","state", "heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2["heart failure"]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
View(dframe.4)
View(dframe.4)
rankall <- function(outcome, num = "best" ){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
hospital <- rep("", length(state))
for (i in 1:length(state)) {
statedata<- data[data$State==state[i],]
if (outcome == 'heart attack') {
death <- as.numeric(statedata[,11])
} else if (outcome == 'heart failure') {
death <- as.numeric(statedata[,17])
} else if (outcome == 'pneumonia') {
death <- as.numeric(statedata[,23])
} else {
stop("invalid outcome")
}
a <- rank(death, na.last=NA)
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(a)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)) {
hospital[i] <- NA
} else {
hospital[i] <- statedata$Hospital.Name[order(death, statedata$Hospital.Name)[r]]
}
}
return(data.frame(hospital=hospital, state=state))
}
rankall("heart failure", 5)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
hospital <- rep("", length(state))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
1
submit()
submit()
submit(3)
#ranking hospitals by outcome in a state
rankhospital <- function(state, outcome, num){
#reads outcome-of-care-measures.csv into R
dframe.1 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check for valid input for state and outcome
if (!(state %in% dframe.1$State)){
stop("invalid state")}
if (!(outcome %in% c("heart attack","heart failure", "pneumonia"))){
stop("invalid outcome")}
#subsets dframe by state, extracts hospital name and outcome measures only
dframe.2 <- dframe.1[dframe.1$State == state, c(2, 11, 17, 23)]
#tranforms columns containing outcome measures into numeric class
dframe.2[,c(2,3,4)] <- sapply(dframe.2[,c(2,3,4)], as.numeric)
#renames column names in dframe.2 according to possible outcome inputs
colnames(dframe.2) <-c("name","heart attack", "heart failure", "pneumonia")
#removes NA values from specified outcome columns
dframe.3 <- dframe.2[!is.na(dframe.2[outcome]),]
#sorts subsetted dataframe by outcome measure (decreasing), then by name (alphabetical)
dframe.4 <- dframe.3[order(dframe.3[,outcome], dframe.3[,"name"], decreasing = FALSE),]
#returns hospital name based on "num" input
if (num == "best"){
return(head(dframe.4, 1)[[1]])
} else if (num == "worst"){
return(tail(dframe.4, 1)[[1]])
} else {
return(dframe.4[num,"name"])
}
}
submit()
submit()
submit()
submit()
submit()
submit()
submit()
set.seed(1)
rpois(5,2)
set.seed(1)
rpois(5,2)
setwd("~/Dropbox/_ONGOING PROJECTS/Get Shit Done/Medical Misconduct/QGIS")
medmis <- read.csv("20140504_Medical Misconduct_CompleteCase.csv")
medmis <- read.csv("20140504_Medical Misconduct_CompleteCase.csv")
AED <- medmis$Age.at.Effective.Date
mean(AED, na.rm = TRUE)
hist(AED)
bar(med)
date <- as.character(medmis$Effective.Date)
date <- as.Date(date,"%m/%d/%y")
View(medmis)
?help
?mean
setwd("~/Copy/MOOCs/EdX_Genomics/labs/week3")
library(Biobase)
# library(devtools)
# install_github("dagdata","genomicsclass")
library(dagdata)
data(maPooling)
e <- maPooling
head(pData(e))
setwd("~/coursera-data-science/ProgrammingAssignment3")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
state <- sort(unique(state))
